DATE : 26th September
Link : https://practice.geeksforgeeks.org/problems/count-occurences-of-anagrams5839/1#
****************************************************************************************************************************************************

Problem :
Example 1:

Input:
txt = forxxorfxdofr
pat = for
Output: 3
Explanation: for, orf and ofr appears
in the txt, hence answer is 3.


Example 2:

Input:
txt = aabaabaa
pat = aaba
Output: 4
Explanation: aaba is present 4 times
in txt.


1. First Approach(Own approach):
Explanation : Sort the pat and substrings in alphabetical order, then check for the equality of strings and increase the count

class Solution {
    public static String sort(String str)
    {
        String sorted = "";
        for(int i=97;i<=122;i++)
        {
            char c = (char)i;
            for(int j=0;j<str.length();j++)
            {
                char ch = str.charAt(j);
                if(ch == c)
                sorted+=ch;
            }
        }
            return sorted;
        }
    int search(String pat, String txt) {
        int l1 = pat.length();
        int l2 = txt.length();
        int count = 0;
        pat = sort(pat);
        for(int i = 0 ; i <= l2 - l1 ; i++)
        {
            String st = txt.substring(i , i + l1);
            st = sort(st);
            if(pat.equals(st) == true)
            count++;
        }
        return count;
    }
}


2. Efficient approach using the concept of SLIDING WINDOW :

class Solution {
    int search(String p, String s) {
       // change CHARACTERS to support range of supported
        // characters
        int CHARACTERS = 256;
        int sn = s.length();
        int pn = p.length();
        int count = 0;
        if (sn < 0 || pn < 0 || sn < pn)
            return 0;
 
        char[] pArr = new char[CHARACTERS];
        char[] sArr = new char[CHARACTERS];
        int i = 0;
        // till window size
        for (; i < pn; i++) {
            sArr[CHARACTERS - s.charAt(i)]++;
            pArr[CHARACTERS - p.charAt(i)]++;
        }
        if (Arrays.equals(pArr, sArr))
            count += 1;
        // next window
        for (; i < sn; i++) {
            sArr[CHARACTERS - s.charAt(i)]++;
            sArr[CHARACTERS - s.charAt(i - pn)]--;
 
            if (Arrays.equals(pArr, sArr))
                count += 1;
        }
        return count;
    }
}




Simpler apporach with same concept as of 2

class Solution {

   int search(String pat, String txt) {
       // code here
       int n = txt.length();
       int m = pat.length();
       char[] txt2 = txt.toCharArray();
       char[] pat2 = pat.toCharArray();
       int[] a = new int[256];
       int[] b = new int[256];
       for(int i=0; i<m; i++){
           b[txt2[i]]++;
           a[pat2[i]]++;
       }
       int count=0;
       for(int i=m; i<n; i++){
           if(ifSame(b, a))
               count++;
           b[txt2[i]]++;
           b[txt2[i-m]]--;
       }
       if(ifSame(b, a))
           count++;
       return count;
   }
   public static boolean ifSame(int[] b, int[] a){
       for(int i=0; i<256; i++){
           if(b[i] != a[i])
               return false;
       }
       return true;
   }
}
