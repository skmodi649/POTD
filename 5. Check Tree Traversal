DATE : 24th Sepetember
Problem : Given Preorder, Inorder and Postorder traversals of some tree of size N. The task is to check if they are all of the same tree or not.

Example 1:

Input:
N = 5
preorder[] = {1, 2, 4, 5, 3}
inorder[] = {4, 2, 5, 1, 3}
postorder[] = {4, 5, 2, 3, 1}
Output: Yes
Explanation: 
All of the above three traversals 
are of the same tree.
           1
         /   \
        2     3
      /   \
     4     5
     
  
SOLUTION : 
1. First Approach :
Explanation : I actually built the tree using inorder and preorder traversals, and then compared its postorder traversal with the given postorder array. 

For building the tree, we store positions of every element of inorder traversal array in a hashmap. And we go step by step through the preorder array, 
recursively building the tree in valid (start, end) ranges which we obtain through the hashmap.

 

While building the tree though, there can be 2 invalid cases:

1) The node does not exist in our hashmap

2) The position of the node is either < start or > end



Code :
class Solution{
    static int idx;
    static boolean isPossible;
    static boolean checktree(int preorder[], int inorder[], int postorder[], int N){
        idx = 0;
        isPossible = true;
        Map<Integer, Integer> hmap = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) hmap.put(inorder[i], i);
        Tree root = buildTree(inorder, preorder, hmap, 0, N-1);
        if(!isPossible) return false;
        List<Integer> post = new ArrayList<>();
        buildPost(root, post);

        return Arrays.equals(post.stream().mapToInt(i->i).toArray(), postorder);
    }
    
    private static void buildPost(Tree root, List<Integer> post){
        if(root == null) return;
        buildPost(root.left, post);
        buildPost(root.right, post);
        post.add(root.val);
    }
    
    private static Tree buildTree(int[] inorder, int[] preorder, Map<Integer, Integer> hmap, int start, int end){
        if(start > end) return null;
        if(!isPossible) return null;
        int val = preorder[idx++];
        Tree root = new Tree(val);
        if(!hmap.containsKey(val)){
            isPossible = false;
            return null;
        }
        int pos = hmap.get(val);
        if(pos < start || pos > end){
            isPossible = false;
            return null;
        }
        root.left = buildTree(inorder, preorder, hmap, start, pos-1);
        root.right = buildTree(inorder, preorder, hmap, pos+1, end);
        return root;
    }
    
}




2. Second Approach(Mine) : Simply building tree using preorder and inorder traversals, then finding the postorder traversal  and check if the calculated postorder traversal
   matches the given postorder traversal
   
   Code :
   class Node {
	int data;
	Node left, right;

	Node(int data)
	{
		this.data = data;
		left = right = null;
	}
}

class Solution {
	Node root;
	static int preIndex = 0;
        static ArrayList<Integer> post = new ArrayList<Integer>();
 
    	static void printPostorder(Node node)
	{
		if (node == null)
			return;

		
		printPostorder(node.left);
		printPostorder(node.right);
                post.add(node.data);
	}
 
	Node buildTree(int in[], int pre[], int inStrt, int inEnd)
	{
		if (inStrt > inEnd)
			return null;

		/* Pick current node from Preorder traversal using preIndex
		and increment preIndex */
		Node tNode = new Node(pre[preIndex++]);

		/* If this node has no children then return */
		if (inStrt == inEnd)
			return tNode;

		/* Else find the index of this node in Inorder traversal */
		int inIndex = search(in, inStrt, inEnd, tNode.data);

		/* Using index in Inorder traversal, construct left and
		right subtress */
		tNode.left = buildTree(in, pre, inStrt, inIndex - 1);
		tNode.right = buildTree(in, pre, inIndex + 1, inEnd);

		return tNode;
	}

	/* UTILITY FUNCTIONS */

	/* Function to find index of value in arr[start...end]
	The function assumes that value is present in in[] */
	int search(int arr[], int strt, int end, int value)
	{
		int i;
		for (i = strt; i <= end; i++) {
			if (arr[i] == value)
				return i;
		}
		return i;
	}

	/* This function is here just to test buildTree() */
    static boolean checktree(int preorder[], int inorder[], int postorder[], int N)
    {
        Solution tree = new Solution();
        Node root = tree.buildTree(inorder, preorder, 0 , N - 1);
        printPostorder(root);
        for(int i=0;i<N;i++)
        {
            int val1 = post.get(i);
            int val2 = postorder[i];
            if(val1 != val2)
            return false;
         }
         return true;
}
}
