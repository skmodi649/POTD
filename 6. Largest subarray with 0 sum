DATE : 25th September

Problem : 
Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

1. First Approach(Naive) : O(n*n)

int maxLen(int arr[],int n)
{
int max = 0;
for(int i=0;i<n;i++)
{
int count = 0;
int sum = 0;
for(int j=i;j<n;j++)
{
sum+=arr[j];
if(sum==0)
count++;
}
if(count > max)
max = count;
}
return max;
}
}





2. Standard and Efficient approach : O(n)

Concept:
Efficient Approach: The brute force solution is calculating the sum of each and every sub-array and checking whether the sum is zero or not. 
Let’s now try to improve the time complexity by taking an extra space of ‘n’ length. 
The new array will store the sum of all the elements up to that index. The sum-index pair will be stored in a hash-map. 
A Hash map allows insertion and deletion of key-value pair in constant time. Therefore, the time complexity remains unaffected. 
So, if the same value appears twice in the array, it will be guaranteed that the particular array will be a zero-sum sub-array. 
 

Mathematical Proof:  

prefix(i) = arr[0] + arr[1] +…+ arr[i] 
prefix(j) = arr[0] + arr[1] +…+ arr[j], j>i 
ifprefix(i) == prefix(j) then prefix(j) – prefix(i) = 0 that means arr[i+1] + .. + arr[j] = 0, So a sub-array has zero sum , and the length of that sub-array is j-i+1  

Algorithm:  

Create an extra space, an array of length n (prefix), a variable (sum), length (max_len), and a hash map (hm) to store the sum-index pair as a key-value pair.
Move along the input array from the start to the end.
For every index, update the value of sum = sum + array[i].
Check every index, if the current sum is present in the hash map or not.
If present, update the value of max_len to a maximum difference of two indices (current index and index in the hash-map) and max_len.
Else, put the value (sum) in the hash map, with the index as a key-value pair.
Print the maximum length (max_len).



Code :

class GfG
{
    int maxLen(int arr[], int n)
    {
       HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
int sum = 0;
int len = 0;
for(int i=0;i<n;i++){ 
    sum+=arr[i];
    if(sum == 0)
    len = i + 1;
    if(arr[i]==0 && len == 0)
    len = 1;
    Integer prev = map.get(sum);
    if(prev!=null)
    len = Math.max(len , i - prev);
    else
    map.put(sum,i);
}
    return len;
    }
}
